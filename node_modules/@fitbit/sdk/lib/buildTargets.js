"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
const lodash_1 = tslib_1.__importDefault(require("lodash"));
const semver_1 = tslib_1.__importDefault(require("semver"));
const sdkVersion_1 = tslib_1.__importDefault(require("./sdkVersion"));
const baseBuildTargets = {
    higgs: {
        displayName: 'Fitbit Ionic',
        platform: ['30.1.2+'],
        resourceFilterTag: '348x250',
    },
    meson: {
        displayName: 'Fitbit Versa',
        platform: ['32.4.18+'],
        resourceFilterTag: '300x300',
    },
    gemini: {
        displayName: 'Fitbit Versa Lite',
        platform: ['33.1.30+'],
        resourceFilterTag: '300x300',
        minSDKVersion: '3.1.0',
        maxDeviceBundleSize: 3145728,
        polyfills: {
            barometer: 'export var Barometer = undefined; export default Barometer;',
            gyroscope: 'export var Gyroscope = undefined; export default Gyroscope;',
            orientation: 'export var OrientationSensor = undefined; export default OrientationSensor;',
            'user-activity': `
        export { today, goals, default } from 'user-activity';
        import { today } from 'user-activity';
        Object.defineProperty(today.local, 'elevationGain', {});
      `,
        },
    },
};
let extraBuildTargets;
try {
    extraBuildTargets = require('@fitbit/sdk-build-targets').default;
}
catch (_a) { }
function generateBuildTargets() {
    return lodash_1.default.pickBy(Object.assign({}, baseBuildTargets, extraBuildTargets), ({ minSDKVersion }) => minSDKVersion === undefined ||
        semver_1.default.gte(sdkVersion_1.default().format(), minSDKVersion));
}
exports.generateBuildTargets = generateBuildTargets;
const buildTargets = generateBuildTargets();
exports.default = buildTargets;
